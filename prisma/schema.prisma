generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ==================== AUTHENTICATION & USERS ====================

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  emailVerified         DateTime?
  password              String?
  name                  String?
  image                 String?
  role                  UserRole               @default(CLIENT)
  status                UserStatus             @default(ACTIVE)
  mfaEnabled            Boolean                @default(false)
  mfaSecret             String?
  mfaBackupCodes        String[]
  mfaMethod             MfaMethod?
  mfaVerified           Boolean                @default(false)
  mfaPhone              String?
  lastLogin             DateTime?
  loginAttempts         Int                    @default(0)
  lockedUntil           DateTime?
  passwordResetToken    String?                @unique
  passwordResetExpires  DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  
  // Relations
  accounts              Account[]
  sessions              Session[]
  profile               Profile?
  therapistProfile      TherapistProfile?
  clientProfiles        ClientProfile[]
  crisisInterventions   CrisisIntervention[]
  wellnessData          WellnessData[]
  journals              JournalEntry[]
  appointments          Appointment[]          @relation("UserAppointments")
  therapistAppointments Appointment[]          @relation("TherapistAppointments")
  messages              Message[]
  notifications         Notification[]
  conversations         ConversationParticipant[]
  notificationPrefs     NotificationPreference?
  pushSubscriptions     PushSubscription[]
  groupMemberships      GroupMember[]
  auditLogs             AuditLog[]
  files                 File[]
  customer              Customer?
  
  @@index([email])
  @@index([role])
  @@index([status])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  ipAddress    String?
  userAgent    String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}

// ==================== USER PROFILES ====================

model Profile {
  id                String           @id @default(cuid())
  userId            String           @unique
  firstName         String
  lastName          String
  dateOfBirth       DateTime
  phoneNumber       String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  country           String?
  emergencyContact  Json?
  medicalHistory    Json?            @db.JsonB
  medications       Json?            @db.JsonB
  allergies         Json?            @db.JsonB
  preferences       Json?            @db.JsonB
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model TherapistProfile {
  id                String           @id @default(cuid())
  userId            String           @unique
  licenseNumber     String           @unique
  licenseState      String
  licenseExpiry     DateTime
  specializations   String[]
  education         Json[]           @db.JsonB
  certifications    Json[]           @db.JsonB
  yearsOfExperience Int
  bio               String?          @db.Text
  acceptingClients  Boolean          @default(true)
  maxClients        Int              @default(50)
  currentClients    Int              @default(0)
  availableHours    Json?            @db.JsonB
  hourlyRate        Float?
  insuranceAccepted String[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  clients           ClientProfile[]
  sessionNotes      SessionNote[]
  treatmentPlans    TreatmentPlan[]
  
  @@index([userId])
  @@index([acceptingClients])
}

model ClientProfile {
  id                  String               @id @default(cuid())
  userId              String
  therapistId         String?
  intakeDate          DateTime             @default(now())
  status              ClientStatus         @default(ACTIVE)
  primaryConcerns     String[]
  goals               String[]
  riskLevel           RiskLevel            @default(LOW)
  consentForms        Json?                @db.JsonB
  insuranceInfo       Json?                @db.JsonB
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  therapist           TherapistProfile?    @relation(fields: [therapistId], references: [id])
  sessionNotes        SessionNote[]
  treatmentPlans      TreatmentPlan[]
  progressReports     ProgressReport[]
  
  @@unique([userId, therapistId])
  @@index([userId])
  @@index([therapistId])
  @@index([status])
}

// ==================== CRISIS MANAGEMENT ====================

model CrisisIntervention {
  id                String              @id @default(cuid())
  userId            String
  severity          CrisisSeverity
  triggerEvent      String?             @db.Text
  symptoms          String[]
  interventionType  InterventionType
  status            InterventionStatus  @default(ACTIVE)
  startTime         DateTime            @default(now())
  endTime           DateTime?
  outcome           String?             @db.Text
  followUpRequired  Boolean             @default(true)
  followUpDate      DateTime?
  responderNotes    String?             @db.Text
  resourcesProvided String[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([severity])
  @@index([status])
  @@index([startTime])
}

// ==================== WELLNESS TRACKING ====================

model WellnessData {
  id            String        @id @default(cuid())
  userId        String
  date          DateTime      @default(now())
  moodScore     Int           
  anxietyLevel  Int           
  stressLevel   Int           
  sleepHours    Float?
  sleepQuality  Int?          
  exercise      Boolean       @default(false)
  exerciseMinutes Int?
  meditation    Boolean       @default(false)
  meditationMinutes Int?
  socialContact Boolean       @default(false)
  medications   String[]
  symptoms      String[]
  triggers      String[]
  copingStrategies String[]
  notes         String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

model JournalEntry {
  id          String        @id @default(cuid())
  userId      String
  title       String?
  content     String        @db.Text
  mood        String?
  tags        String[]
  isPrivate   Boolean       @default(true)
  attachments String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
}

// ==================== THERAPY SESSIONS ====================

model Appointment {
  id              String            @id @default(cuid())
  userId          String
  therapistId     String
  scheduledAt     DateTime
  duration        Int               @default(60)
  type            AppointmentType
  status          AppointmentStatus @default(SCHEDULED)
  location        String?
  meetingUrl      String?
  notes           String?           @db.Text
  reminderSent    Boolean           @default(false)
  cancelReason    String?
  rescheduledFrom String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  user      User         @relation("UserAppointments", fields: [userId], references: [id], onDelete: Cascade)
  therapist User         @relation("TherapistAppointments", fields: [therapistId], references: [id])
  sessionNote SessionNote?
  payments  Payment[]
  
  @@index([userId])
  @@index([therapistId])
  @@index([scheduledAt])
  @@index([status])
}

model SessionNote {
  id                String         @id @default(cuid())
  appointmentId     String         @unique
  clientId          String
  therapistId       String
  sessionDate       DateTime
  sessionType       String
  presentingIssues  String[]
  interventions     String[]
  clientResponse    String?        @db.Text
  homework          String?        @db.Text
  riskAssessment    Json?          @db.JsonB
  planForNext       String?        @db.Text
  additionalNotes   String?        @db.Text
  isSigned          Boolean        @default(false)
  signedAt          DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  appointment  Appointment       @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  client       ClientProfile     @relation(fields: [clientId], references: [id])
  therapist    TherapistProfile  @relation(fields: [therapistId], references: [id])
  
  @@index([clientId])
  @@index([therapistId])
  @@index([sessionDate])
}

model TreatmentPlan {
  id              String           @id @default(cuid())
  clientId        String
  therapistId     String
  title           String
  diagnosis       String[]
  goals           Json[]           @db.JsonB
  objectives      Json[]           @db.JsonB
  interventions   Json[]           @db.JsonB
  frequency       String
  duration        String
  startDate       DateTime
  reviewDate      DateTime
  endDate         DateTime?
  status          PlanStatus       @default(ACTIVE)
  progress        Json?            @db.JsonB
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  client    ClientProfile    @relation(fields: [clientId], references: [id])
  therapist TherapistProfile @relation(fields: [therapistId], references: [id])
  
  @@index([clientId])
  @@index([therapistId])
  @@index([status])
}

model ProgressReport {
  id              String        @id @default(cuid())
  clientId        String
  reportDate      DateTime
  reportPeriod    String
  summary         String        @db.Text
  goalsProgress   Json[]        @db.JsonB
  challenges      String[]
  achievements    String[]
  recommendations String[]
  nextSteps       String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  client ClientProfile @relation(fields: [clientId], references: [id])
  
  @@index([clientId])
  @@index([reportDate])
}

// ==================== COMMUNICATION ====================

model Conversation {
  id           String                    @id @default(cuid())
  type         ConversationType          @default(DIRECT)
  title        String?
  lastMessage  String?
  lastActivity DateTime                  @default(now())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  
  participants ConversationParticipant[]
  messages     Message[]
  
  @@index([lastActivity])
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  role           String?      @default("member")
  joinedAt       DateTime     @default(now())
  lastRead       DateTime?
  isMuted        Boolean      @default(false)
  isArchived     Boolean      @default(false)
  
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([conversationId, userId])
  @@index([userId])
}

model Message {
  id             String        @id @default(cuid())
  conversationId String?
  senderId       String
  recipientId    String?       // For backward compatibility
  content        String        @db.Text
  type           String        @default("text")
  isRead         Boolean       @default(false)
  readAt         DateTime?
  isEdited       Boolean       @default(false)
  editedAt       DateTime?
  isDeleted      Boolean       @default(false)
  deletedAt      DateTime?
  attachments    String[]
  metadata       Json?         @db.JsonB
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  readReceipts MessageReadReceipt[]
  
  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}

model MessageReadReceipt {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId])
  @@index([userId])
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  title       String
  message     String
  type        NotificationType
  priority    NotificationPriority @default(NORMAL)
  isRead      Boolean          @default(false)
  readAt      DateTime?
  actionUrl   String?
  metadata    Json?            @db.JsonB
  createdAt   DateTime         @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([createdAt])
}

model NotificationPreference {
  id            String   @id @default(cuid())
  userId        String   @unique
  email         Boolean  @default(true)
  push          Boolean  @default(true)
  sms           Boolean  @default(false)
  appointments  Boolean  @default(true)
  messages      Boolean  @default(true)
  wellness      Boolean  @default(true)
  crisis        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PushSubscription {
  id           String   @id @default(cuid())
  userId       String
  endpoint     String   @unique
  keys         Json     @db.JsonB
  active       Boolean  @default(true)
  deviceType   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Group {
  id           String         @id @default(cuid())
  name         String
  description  String?
  type         String         @default("support")
  isPrivate    Boolean        @default(false)
  maxMembers   Int            @default(20)
  createdBy    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  members      GroupMember[]
  
  @@index([type])
  @@index([createdBy])
}

model GroupMember {
  id        String   @id @default(cuid())
  groupId   String
  userId    String
  role      String   @default("member")
  status    String   @default("ACTIVE")
  joinedAt  DateTime @default(now())
  
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([groupId, userId])
  @@index([userId])
}

// ==================== AUDIT & COMPLIANCE ====================

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  entity      String
  entityId    String?
  details     Json?    @db.JsonB
  ipAddress   String?
  userAgent   String?
  outcome     String
  createdAt   DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([entity])
  @@index([action])
  @@index([createdAt])
}

model File {
  id           String    @id @default(cuid())
  userId       String
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  category     FileCategory
  isEncrypted  Boolean   @default(true)
  metadata     Json?     @db.JsonB
  uploadedAt   DateTime  @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([category])
  @@index([uploadedAt])
}

// ==================== PAYMENTS & BILLING ====================

model Customer {
  id               String            @id @default(cuid())
  userId           String            @unique
  stripeCustomerId String            @unique
  email            String
  name             String?
  address          Json?             @db.JsonB
  taxId            String?
  defaultPaymentMethod String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptions    Subscription[]
  paymentMethods   PaymentMethod[]
  invoices         Invoice[]
  payments         Payment[]
  billingAddress   BillingAddress?
  
  @@index([userId])
  @@index([stripeCustomerId])
}

model PaymentMethod {
  id               String            @id @default(cuid())
  customerId       String
  stripePaymentMethodId String       @unique
  type             PaymentMethodType
  card             Json?             @db.JsonB
  isDefault        Boolean           @default(false)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  customer         Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  payments         Payment[]
  
  @@index([customerId])
  @@index([stripePaymentMethodId])
}

model Subscription {
  id                     String                 @id @default(cuid())
  customerId             String
  stripeSubscriptionId   String                 @unique
  stripePriceId          String
  stripeProductId        String
  status                 SubscriptionStatus
  currentPeriodStart     DateTime
  currentPeriodEnd       DateTime
  cancelAt               DateTime?
  canceledAt             DateTime?
  trialStart             DateTime?
  trialEnd               DateTime?
  planType               SubscriptionPlanType
  planName               String
  amount                 Float
  currency               String                 @default("usd")
  interval               String                 // month, year
  intervalCount          Int                    @default(1)
  metadata               Json?                  @db.JsonB
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  
  customer               Customer               @relation(fields: [customerId], references: [id], onDelete: Cascade)
  invoices               Invoice[]
  subscriptionItems      SubscriptionItem[]
  
  @@index([customerId])
  @@index([stripeSubscriptionId])
  @@index([status])
  @@index([planType])
}

model SubscriptionItem {
  id                   String               @id @default(cuid())
  subscriptionId       String
  stripeItemId         String               @unique
  stripePriceId        String
  quantity             Int                  @default(1)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  
  subscription         Subscription         @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@index([subscriptionId])
}

model Invoice {
  id                   String               @id @default(cuid())
  customerId           String
  subscriptionId       String?
  stripeInvoiceId      String               @unique
  number               String?
  status               InvoiceStatus
  total                Float
  subtotal             Float
  tax                  Float                @default(0)
  amountPaid           Float                @default(0)
  amountDue            Float                @default(0)
  currency             String               @default("usd")
  description          String?
  pdfUrl               String?
  hostedInvoiceUrl     String?
  paymentIntentId      String?
  dueDate              DateTime?
  paidAt               DateTime?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  
  customer             Customer             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  subscription         Subscription?        @relation(fields: [subscriptionId], references: [id])
  invoiceItems         InvoiceItem[]
  
  @@index([customerId])
  @@index([subscriptionId])
  @@index([stripeInvoiceId])
  @@index([status])
}

model InvoiceItem {
  id                   String               @id @default(cuid())
  invoiceId            String
  description          String
  amount               Float
  quantity             Int                  @default(1)
  unitAmount           Float
  periodStart          DateTime?
  periodEnd            DateTime?
  proration            Boolean              @default(false)
  
  invoice              Invoice              @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@index([invoiceId])
}

model Payment {
  id                   String               @id @default(cuid())
  customerId           String
  paymentMethodId      String?
  appointmentId        String?
  stripePaymentIntentId String             @unique
  amount               Float
  currency             String               @default("usd")
  status               PaymentStatus
  type                 PaymentType
  description          String?
  receiptUrl           String?
  failureCode          String?
  failureMessage       String?
  refunded             Boolean              @default(false)
  refundedAmount       Float                @default(0)
  metadata             Json?                @db.JsonB
  processedAt          DateTime?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  
  customer             Customer             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  paymentMethod        PaymentMethod?       @relation(fields: [paymentMethodId], references: [id])
  appointment          Appointment?         @relation(fields: [appointmentId], references: [id])
  refunds              Refund[]
  
  @@index([customerId])
  @@index([appointmentId])
  @@index([stripePaymentIntentId])
  @@index([status])
  @@index([type])
  @@index([processedAt])
}

model Refund {
  id                   String               @id @default(cuid())
  paymentId            String
  stripeRefundId       String               @unique
  amount               Float
  currency             String               @default("usd")
  reason               RefundReason         @default(REQUESTED_BY_CUSTOMER)
  status               RefundStatus
  receiptNumber        String?
  metadata             Json?                @db.JsonB
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  
  payment              Payment              @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  @@index([paymentId])
  @@index([stripeRefundId])
  @@index([status])
}

model TherapyPlan {
  id                   String               @id @default(cuid())
  name                 String
  description          String               @db.Text
  stripePriceId        String               @unique
  stripeProductId      String
  amount               Float
  currency             String               @default("usd")
  interval             String               // month, year
  intervalCount        Int                  @default(1)
  sessionsIncluded     Int                  @default(4)
  duration             String               // e.g., "3 months", "6 months"
  features             String[]
  isActive             Boolean              @default(true)
  trialPeriodDays      Int?
  setupFee             Float?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  
  @@index([stripePriceId])
  @@index([isActive])
}

model BillingAddress {
  id                   String               @id @default(cuid())
  customerId           String               @unique
  line1                String
  line2                String?
  city                 String
  state                String
  postalCode           String
  country              String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  
  customer             Customer             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@index([customerId])
}

// ==================== PERFORMANCE MONITORING ====================

model PerformanceMetric {
  id              String   @id @default(cuid())
  url             String
  timestamp       DateTime @default(now())
  userAgent       String
  clientIP        String?
  sessionId       String?
  userId          String?
  vitals          String?  @db.Text // JSON string of Web Vitals data
  metadata        Json?    @db.JsonB
  createdAt       DateTime @default(now())
  
  @@index([url])
  @@index([timestamp])
  @@index([userId])
  @@index([sessionId])
}

model ErrorMetric {
  id              String   @id @default(cuid())
  message         String   @db.Text
  stack           String?  @db.Text
  filename        String?
  lineno          Int?
  colno           Int?
  url             String
  timestamp       DateTime @default(now())
  userAgent       String
  userId          String?
  sessionId       String
  severity        ErrorSeverity
  type            ErrorType
  resolved        Boolean  @default(false)
  resolvedAt      DateTime?
  context         Json?    @db.JsonB
  createdAt       DateTime @default(now())
  
  @@index([severity])
  @@index([type])
  @@index([timestamp])
  @@index([userId])
  @@index([resolved])
}

model QueryMetric {
  id              String      @id @default(cuid())
  query           String      @db.Text
  operation       QueryOperation
  duration        Float
  timestamp       DateTime    @default(now())
  rows            Int         @default(0)
  table           String?
  userId          String?
  endpoint        String?
  success         Boolean     @default(true)
  errorMessage    String?     @db.Text
  cached          Boolean?
  createdAt       DateTime    @default(now())
  
  @@index([operation])
  @@index([duration])
  @@index([timestamp])
  @@index([table])
  @@index([userId])
  @@index([success])
}

// ==================== ENUMS ====================

enum ErrorSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ErrorType {
  JAVASCRIPT
  UNHANDLED_REJECTION
  RESOURCE
  NETWORK
  CUSTOM
}

enum QueryOperation {
  SELECT
  INSERT
  UPDATE
  DELETE
  UPSERT
  CREATE
  DROP
}

enum UserRole {
  ADMIN
  THERAPIST
  CLIENT
  CRISIS_RESPONDER
  SUPERVISOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum MfaMethod {
  TOTP
  SMS
  EMAIL
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  DISCHARGED
  ON_HOLD
}

enum RiskLevel {
  LOW
  MODERATE
  HIGH
  CRITICAL
}

enum CrisisSeverity {
  LOW
  MODERATE
  HIGH
  CRITICAL
  EMERGENCY
}

enum InterventionType {
  CALL
  CHAT
  VIDEO
  IN_PERSON
  REFERRAL
  EMERGENCY_DISPATCH
}

enum InterventionStatus {
  ACTIVE
  RESOLVED
  ESCALATED
  REFERRED
  FOLLOWUP_NEEDED
}

enum AppointmentType {
  INITIAL_CONSULTATION
  THERAPY_SESSION
  FOLLOW_UP
  CRISIS_SESSION
  GROUP_SESSION
  ASSESSMENT
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum PlanStatus {
  DRAFT
  ACTIVE
  UNDER_REVIEW
  COMPLETED
  DISCONTINUED
}

enum ConversationType {
  DIRECT
  GROUP
  THERAPY
  CRISIS
  SUPPORT_GROUP
}

enum MessageType {
  DIRECT
  BROADCAST
  SYSTEM
  AUTOMATED
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationType {
  APPOINTMENT
  MESSAGE
  CRISIS
  SYSTEM
  WELLNESS
  MEDICATION
  SESSION
  ACHIEVEMENT
  GROUP
  GENERAL
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum FileCategory {
  CONSENT_FORM
  INSURANCE
  MEDICAL_RECORD
  SESSION_NOTE
  ASSESSMENT
  REPORT
  OTHER
}

// ==================== PAYMENT ENUMS ====================

enum PaymentMethodType {
  CARD
  BANK_ACCOUNT
  ACH
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
}

enum SubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  PAUSED
}

enum SubscriptionPlanType {
  BASIC
  STANDARD
  PREMIUM
  FAMILY
  GROUP
  ENTERPRISE
  THERAPY_PACKAGE
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  UNCOLLECTIBLE
  VOID
}

enum PaymentStatus {
  REQUIRES_PAYMENT_METHOD
  REQUIRES_CONFIRMATION
  REQUIRES_ACTION
  PROCESSING
  REQUIRES_CAPTURE
  CANCELED
  SUCCEEDED
  FAILED
}

enum PaymentType {
  SUBSCRIPTION
  ONE_TIME
  SESSION_PAYMENT
  SETUP_FEE
  LATE_FEE
  REFUND
}

enum RefundReason {
  DUPLICATE
  FRAUDULENT
  REQUESTED_BY_CUSTOMER
  EXPIRED_UNCAPTURED_CHARGE
}

enum RefundStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}
