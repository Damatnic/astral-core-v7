apiVersion: apps/v1
kind: Deployment
metadata:
  name: astral-core-v7
  namespace: astral-core
  labels:
    app: astral-core-v7
    version: v7
    environment: production
  annotations:
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: astral-core-v7
  template:
    metadata:
      labels:
        app: astral-core-v7
        version: v7
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/api/metrics"
        prometheus.io/port: "3000"
    spec:
      serviceAccountName: astral-core-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: astral-core-v7
        image: ghcr.io/astral-core/astral-core-v7:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: NEXTAUTH_URL
          valueFrom:
            configMapKeyRef:
              name: astral-config
              key: nextauth-url
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: url
        - name: NEXTAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: nextauth-secret
              key: secret
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: stripe-secret
              key: secret-key
        - name: STRIPE_WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: stripe-secret
              key: webhook-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: encryption-secret
              key: key
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: astral-uploads-pvc
      - name: tmp
        emptyDir: {}
      imagePullSecrets:
      - name: ghcr-secret
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - astral-core-v7
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: astral-core-v7-service
  namespace: astral-core
  labels:
    app: astral-core-v7
    service: astral-core-v7
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  selector:
    app: astral-core-v7

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: astral-config
  namespace: astral-core
  labels:
    app: astral-core-v7
data:
  nextauth-url: "https://astral-core.com"
  node-env: "production"
  log-level: "info"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: astral-uploads-pvc
  namespace: astral-core
  labels:
    app: astral-core-v7
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: aws-efs
  resources:
    requests:
      storage: 100Gi

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: astral-core-service-account
  namespace: astral-core
  labels:
    app: astral-core-v7
automountServiceAccountToken: false

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: astral-core-v7-ingress
  namespace: astral-core
  labels:
    app: astral-core-v7
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    nginx.ingress.kubernetes.io/rate-limit-rps: "5"
spec:
  tls:
  - hosts:
    - astral-core.com
    - www.astral-core.com
    secretName: astral-core-tls
  rules:
  - host: astral-core.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: astral-core-v7-service
            port:
              number: 80
  - host: www.astral-core.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: astral-core-v7-service
            port:
              number: 80

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: astral-core-v7-pdb
  namespace: astral-core
  labels:
    app: astral-core-v7
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: astral-core-v7

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: astral-core-v7-hpa
  namespace: astral-core
  labels:
    app: astral-core-v7
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: astral-core-v7
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60