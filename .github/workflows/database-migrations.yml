name: 'Database Migrations'

on:
  push:
    branches: ['main', 'master', 'develop']
    paths:
      - 'prisma/schema.prisma'
      - 'prisma/migrations/**'
  pull_request:
    branches: ['main', 'master', 'develop']
    paths:
      - 'prisma/schema.prisma'
      - 'prisma/migrations/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Migration action to perform'
        required: true
        default: 'validate'
        type: choice
        options:
          - 'validate'
          - 'create-migration'
          - 'deploy-staging'
          - 'deploy-production'
          - 'rollback'
      environment:
        description: 'Target environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - 'staging'
          - 'production'
      migration_name:
        description: 'Migration name (for create-migration)'
        required: false
        type: string

# Prevent concurrent migrations
concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.environment || 'default' }}
  cancel-in-progress: false

env:
  NODE_VERSION: '18.17'

jobs:
  # Validate database schema and migrations
  validate-schema:
    name: 'Validate Database Schema'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v5

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 'Setup Test Database'
        run: |
          docker run --name schema-test-postgres \
            -e POSTGRES_USER=test \
            -e POSTGRES_PASSWORD=test \
            -e POSTGRES_DB=testdb \
            -p 5432:5432 \
            -d postgres:15-alpine
          sleep 10

      - name: 'Validate Prisma Schema'
        run: |
          echo "üîç Validating Prisma schema..."
          npx prisma validate
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"

      - name: 'Generate Prisma Client'
        run: |
          echo "‚öôÔ∏è Generating Prisma client..."
          npx prisma generate
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"

      - name: 'Check Migration Status'
        run: |
          echo "üìä Checking migration status..."
          npx prisma migrate status --schema=./prisma/schema.prisma
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"

      - name: 'Test Migrations on Fresh Database'
        run: |
          echo "üóÑÔ∏è Testing migrations on fresh database..."
          npx prisma migrate deploy
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"

      - name: 'Verify Database State'
        run: |
          echo "‚úÖ Verifying database state..."
          # Check if all tables were created successfully
          docker exec schema-test-postgres psql -U test -d testdb -c "\dt"
          
          # Run basic queries to ensure structure is correct
          docker exec schema-test-postgres psql -U test -d testdb -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';"

  # Create new migration (manual trigger only)
  create-migration:
    name: 'Create Migration'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'create-migration'
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 'Setup Development Database'
        run: |
          docker run --name migration-dev-postgres \
            -e POSTGRES_USER=dev \
            -e POSTGRES_PASSWORD=dev \
            -e POSTGRES_DB=devdb \
            -p 5433:5432 \
            -d postgres:15-alpine
          sleep 10

      - name: 'Create Migration'
        run: |
          migration_name="${{ github.event.inputs.migration_name }}"
          if [ -z "$migration_name" ]; then
            migration_name="migration_$(date +%Y%m%d_%H%M%S)"
          fi
          
          echo "üìù Creating migration: $migration_name"
          npx prisma migrate dev --name "$migration_name" --create-only
        env:
          DATABASE_URL: "postgresql://dev:dev@localhost:5433/devdb"

      - name: 'Commit Migration Files'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add prisma/migrations/
          
          if git diff --staged --quiet; then
            echo "No migration files to commit"
          else
            git commit -m "feat(db): add migration ${{ github.event.inputs.migration_name }}"
            git push
          fi

  # Test migrations against different database versions
  compatibility-test:
    name: 'Database Compatibility Test'
    runs-on: ubuntu-latest
    needs: [validate-schema]
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    strategy:
      matrix:
        postgres_version: ['13', '14', '15', '16']
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v5

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 'Setup PostgreSQL ${{ matrix.postgres_version }}'
        run: |
          docker run --name compat-postgres-${{ matrix.postgres_version }} \
            -e POSTGRES_USER=test \
            -e POSTGRES_PASSWORD=test \
            -e POSTGRES_DB=testdb \
            -p 5432:5432 \
            -d postgres:${{ matrix.postgres_version }}-alpine
          sleep 15

      - name: 'Test Migration Compatibility'
        run: |
          echo "üß™ Testing PostgreSQL ${{ matrix.postgres_version }} compatibility..."
          npx prisma migrate deploy
          npx prisma db seed
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"
        continue-on-error: true

      - name: 'Verify Database Functions'
        run: |
          echo "üîç Verifying database functions..."
          docker exec compat-postgres-${{ matrix.postgres_version }} psql -U test -d testdb -c "SELECT version();"
          docker exec compat-postgres-${{ matrix.postgres_version }} psql -U test -d testdb -c "\dt"

  # Deploy migrations to staging
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [validate-schema, compatibility-test]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/develop') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy-staging')
    
    environment:
      name: staging
      url: https://staging.astral-core.com
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v5

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 'Backup Staging Database'
        run: |
          echo "üíæ Creating staging database backup..."
          timestamp=$(date +%Y%m%d_%H%M%S)
          # This would typically use your cloud provider's backup tools
          echo "Backup created: staging_backup_$timestamp"
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: 'Deploy Migrations to Staging'
        run: |
          echo "üöÄ Deploying migrations to staging..."
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: 'Verify Migration Success'
        run: |
          echo "‚úÖ Verifying migration success..."
          npx prisma migrate status
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: 'Run Staging Health Check'
        run: |
          echo "üè• Running staging health check..."
          # Wait for application to restart with new schema
          sleep 30
          curl -f https://staging.astral-core.com/api/health || exit 1

  # Deploy migrations to production (requires manual approval)
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [validate-schema, compatibility-test, deploy-staging]
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy-production')
    
    environment:
      name: production
      url: https://astral-core.com
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v5

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 'Pre-deployment Validation'
        run: |
          echo "üîç Running pre-deployment validation..."
          npx prisma validate
          npx prisma migrate status --schema=./prisma/schema.prisma
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: 'Create Production Database Backup'
        run: |
          echo "üíæ Creating production database backup..."
          timestamp=$(date +%Y%m%d_%H%M%S)
          # This would typically use your cloud provider's backup tools
          echo "Production backup created: prod_backup_$timestamp"
          echo "BACKUP_ID=prod_backup_$timestamp" >> $GITHUB_ENV

      - name: 'Deploy Migrations to Production'
        run: |
          echo "üöÄ Deploying migrations to production..."
          echo "This is a critical operation. Proceeding with caution..."
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: 'Verify Production Migration'
        run: |
          echo "‚úÖ Verifying production migration..."
          npx prisma migrate status
          echo "Migration completed successfully!"
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: 'Post-deployment Health Check'
        run: |
          echo "üè• Running production health check..."
          sleep 30
          curl -f https://astral-core.com/api/health || exit 1

      - name: 'Send Success Notification'
        run: |
          echo "‚úÖ Production migration completed successfully!"
          echo "Backup ID: ${{ env.BACKUP_ID }}"

  # Rollback migrations (manual trigger only)
  rollback-migration:
    name: 'Rollback Migration'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    
    environment:
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v5

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 'Check Migration Status'
        run: |
          echo "üìä Checking current migration status..."
          npx prisma migrate status
        env:
          DATABASE_URL: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_DATABASE_URL || secrets.STAGING_DATABASE_URL }}

      - name: 'Perform Rollback'
        run: |
          echo "üîÑ Performing migration rollback..."
          echo "‚ö†Ô∏è Manual intervention required for Prisma rollback"
          echo "Prisma doesn't support automatic rollbacks. You need to:"
          echo "1. Revert the schema changes manually"
          echo "2. Create a new migration"
          echo "3. Deploy the new migration"
          
          # For actual rollback, you would need to:
          # 1. Restore from backup
          # 2. Or manually revert schema changes
          # 3. Create corrective migrations
        env:
          DATABASE_URL: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_DATABASE_URL || secrets.STAGING_DATABASE_URL }}

  # Generate migration report
  migration-report:
    name: 'Migration Report'
    runs-on: ubuntu-latest
    needs: [validate-schema, compatibility-test]
    if: always() && (github.event_name == 'pull_request' || github.event_name == 'push')
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v5

      - name: 'Generate Migration Report'
        run: |
          echo "# üóÑÔ∏è Database Migration Report" > migration-report.md
          echo "" >> migration-report.md
          echo "**Date:** $(date -u)" >> migration-report.md
          echo "**Repository:** ${{ github.repository }}" >> migration-report.md
          echo "**Branch:** ${{ github.ref }}" >> migration-report.md
          echo "**Commit:** ${{ github.sha }}" >> migration-report.md
          echo "" >> migration-report.md
          
          echo "## üìä Validation Results" >> migration-report.md
          echo "" >> migration-report.md
          echo "| Check | Status |" >> migration-report.md
          echo "|-------|--------|" >> migration-report.md
          echo "| Schema Validation | ${{ needs.validate-schema.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> migration-report.md
          echo "| Compatibility Test | ${{ needs.compatibility-test.result == 'success' && '‚úÖ Passed' || needs.compatibility-test.result == 'failure' && '‚ùå Failed' || '‚è© Skipped' }} |" >> migration-report.md
          
          echo "" >> migration-report.md
          echo "## üìà Migration Status" >> migration-report.md
          echo "" >> migration-report.md
          
          # List recent migrations
          if [ -d "prisma/migrations" ]; then
            echo "Recent migrations:" >> migration-report.md
            find prisma/migrations -name "migration.sql" | head -5 | while read migration; do
              dir=$(dirname "$migration")
              name=$(basename "$dir")
              echo "- \`$name\`" >> migration-report.md
            done
          else
            echo "No migrations found." >> migration-report.md
          fi
          
          echo "" >> migration-report.md
          echo "## üéØ Recommendations" >> migration-report.md
          echo "" >> migration-report.md
          echo "- Always backup production database before migrations" >> migration-report.md
          echo "- Test migrations in staging environment first" >> migration-report.md
          echo "- Monitor application performance after migrations" >> migration-report.md
          echo "- Keep migration files in version control" >> migration-report.md
          
          cat migration-report.md

      - name: 'Upload Migration Report'
        uses: actions/upload-artifact@v4
        with:
          name: migration-report
          path: migration-report.md
          retention-days: 90

      - name: 'Add Migration Comment (PR only)'
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('migration-report.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });