name: Production Deployment Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Code Quality Checks
  quality-check:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        continue-on-error: true
      
      - name: Run Type Check
        run: npm run typecheck
        continue-on-error: true
      
      - name: Check formatting
        run: npm run format
        continue-on-error: true

  # Security Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true
      
      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'astral-core-v7'
          path: '.'
          format: 'HTML'
        continue-on-error: true

  # Test Suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: astral_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    env:
      DATABASE_URL: postgresql://test:test@localhost:5432/astral_test
      DIRECT_URL: postgresql://test:test@localhost:5432/astral_test
      NEXTAUTH_SECRET: test-secret-key
      ENCRYPTION_KEY: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
      JWT_SIGNING_KEY: test-jwt-key
      CSRF_SECRET: test-csrf-key
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Run database migrations
        run: npx prisma migrate deploy
      
      - name: Run unit tests
        run: npm run test:unit
        continue-on-error: true
      
      - name: Run integration tests
        run: npm run test:integration
        continue-on-error: true
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
        continue-on-error: true

  # Performance Testing
  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          SKIP_TYPE_CHECK: true
      
      - name: Analyze bundle size
        run: npm run analyze:bundle
        continue-on-error: true
      
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: .next/analyze/
        continue-on-error: true

  # Deploy to Vercel Preview
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, test]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy to Vercel Preview
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT
      
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ Preview deployment ready at: ${{ steps.deploy.outputs.preview_url }}'
            })

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, test, performance]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: production
      url: https://astral-core-v7-r7s1g00qe-astral-productions.vercel.app
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy to Production
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production_url=$url" >> $GITHUB_OUTPUT
      
      - name: Run database migrations
        run: |
          npm ci
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        continue-on-error: true
      
      - name: Health check
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.production_url }}/api/health || exit 1
      
      - name: Create deployment annotation
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              production_environment: true,
              auto_merge: false,
              required_contexts: [],
              payload: {
                url: '${{ steps.deploy.outputs.production_url }}'
              }
            });

  # Post-deployment validation
  validate-deployment:
    name: Validate Production Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Wait for deployment to stabilize
        run: sleep 60
      
      - name: Check health endpoint
        run: |
          response=$(curl -s https://astral-core-v7-r7s1g00qe-astral-productions.vercel.app/api/health)
          echo "Health check response: $response"
          echo "$response" | jq -e '.status == "healthy"' || exit 1
      
      - name: Run smoke tests
        run: |
          # Test critical endpoints
          curl -f https://astral-core-v7-r7s1g00qe-astral-productions.vercel.app/api/status
          curl -f https://astral-core-v7-r7s1g00qe-astral-productions.vercel.app/api/monitoring/metrics
        continue-on-error: true
      
      - name: Send deployment notification
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          # Add webhook notification here if configured
      
      - name: Send failure alert
        if: failure()
        run: |
          echo "‚ùå Production deployment validation failed!"
          # Add alert webhook here if configured

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [validate-deployment]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Rollback to previous deployment
        run: vercel rollback --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Send rollback notification
        run: |
          echo "üîÑ Production deployment rolled back due to validation failure"
          # Add webhook notification here if configured