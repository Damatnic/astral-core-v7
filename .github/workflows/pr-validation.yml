name: 'Pull Request Validation'

on:
  pull_request:
    branches: ['main', 'master', 'develop']
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_target:
    branches: ['main', 'master', 'develop']
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel previous runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18.17'
  CACHE_PREFIX: 'astral-core-v7'

jobs:
  # Security check for external contributors
  security-check:
    name: 'Security Check'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: 'Check if PR is from fork'
        run: |
          echo "This PR is from a fork. Manual review required before running workflows."
          echo "Please ensure the PR has been reviewed for malicious content."
          exit 1

  # Code quality and testing validation
  validate:
    name: 'Validate Code'
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    strategy:
      matrix:
        check: ['lint', 'typecheck', 'test', 'build']
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: 'Install Dependencies'
        run: |
          npm ci --prefer-offline --no-audit --no-fund
          
      - name: 'Generate Prisma Client'
        run: |
          npm run db:generate
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"

      - name: 'Setup Test Database'
        if: matrix.check == 'test'
        run: |
          docker run --name test-postgres -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -e POSTGRES_DB=testdb -p 5432:5432 -d postgres:15-alpine
          sleep 10
          
      - name: 'Run ESLint'
        if: matrix.check == 'lint'
        run: |
          npm run lint

      - name: 'Run TypeScript Check'
        if: matrix.check == 'typecheck'
        run: |
          npm run typecheck

      - name: 'Run Tests with Coverage'
        if: matrix.check == 'test'
        run: |
          npm run test:ci
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"
          NEXTAUTH_SECRET: "test-secret-for-ci"
          NEXTAUTH_URL: "http://localhost:3000"

      - name: 'Build Application'
        if: matrix.check == 'build'
        run: |
          npm run build
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"
          NEXTAUTH_SECRET: "test-secret-for-ci"
          NEXTAUTH_URL: "http://localhost:3000"
          SKIP_ENV_VALIDATION: true

      - name: 'Upload Test Coverage'
        if: matrix.check == 'test'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          flags: unittests
          name: codecov-astral-core-v7

  # Code quality analysis
  code-quality:
    name: 'Code Quality Analysis'
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 'Run SonarCloud Analysis'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=astral-core-v7
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.sources=src/
            -Dsonar.tests=tests/,src/**/*.test.ts,src/**/*.test.tsx
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx
            -Dsonar.test.inclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx

  # Security vulnerability scanning
  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 'Run npm audit'
        run: |
          npm audit --audit-level=moderate --production
          
      - name: 'Run Snyk Security Scan'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=upgradable

      - name: 'Upload Snyk Results'
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Docker build test
  docker-build:
    name: 'Docker Build Test'
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Build Docker Image'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            astral-core-v7:pr-${{ github.event.pull_request.number }}

  # Performance and accessibility testing
  lighthouse:
    name: 'Lighthouse Performance Test'
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 'Generate Prisma Client'
        run: npm run db:generate
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"

      - name: 'Build Application'
        run: npm run build
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"
          NEXTAUTH_SECRET: "test-secret-for-ci"
          NEXTAUTH_URL: "http://localhost:3000"
          SKIP_ENV_VALIDATION: true

      - name: 'Start Application'
        run: |
          npm start &
          sleep 30
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"
          NEXTAUTH_SECRET: "test-secret-for-ci"
          NEXTAUTH_URL: "http://localhost:3000"

      - name: 'Run Lighthouse CI'
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.github/lighthouse/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Size analysis
  bundle-analyzer:
    name: 'Bundle Size Analysis'
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 'Analyze Bundle Size'
        uses: nextjs-bundle-analysis/bundle-analysis-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow-id: 'pr-validation.yml'
          skip-build: false

  # Final status check
  validation-complete:
    name: 'All Validations Complete'
    runs-on: ubuntu-latest
    needs: [validate, code-quality, security-scan, docker-build, lighthouse, bundle-analyzer]
    if: always() && github.event.pull_request.draft == false
    
    steps:
      - name: 'Check Validation Results'
        run: |
          echo "Validation Results:"
          echo "- Code Validation: ${{ needs.validate.result }}"
          echo "- Code Quality: ${{ needs.code-quality.result }}"
          echo "- Security Scan: ${{ needs.security-scan.result }}"
          echo "- Docker Build: ${{ needs.docker-build.result }}"
          echo "- Lighthouse: ${{ needs.lighthouse.result }}"
          echo "- Bundle Analysis: ${{ needs.bundle-analyzer.result }}"
          
          if [[ "${{ needs.validate.result }}" != "success" || \
                "${{ needs.code-quality.result }}" != "success" || \
                "${{ needs.security-scan.result }}" != "success" || \
                "${{ needs.docker-build.result }}" != "success" || \
                "${{ needs.lighthouse.result }}" != "success" || \
                "${{ needs.bundle-analyzer.result }}" != "success" ]]; then
            echo "‚ùå One or more validations failed"
            exit 1
          else
            echo "‚úÖ All validations passed successfully"
          fi

      - name: 'Add PR Comment'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üöÄ PR Validation Complete
            
            All automated checks have passed successfully:
            
            ‚úÖ **Code Quality**: ESLint, TypeScript, and formatting checks passed
            ‚úÖ **Tests**: All unit and integration tests passed with coverage
            ‚úÖ **Security**: Vulnerability scanning completed
            ‚úÖ **Build**: Docker build and Next.js build successful
            ‚úÖ **Performance**: Lighthouse performance tests completed
            ‚úÖ **Bundle Size**: Bundle analysis completed
            
            This PR is ready for manual review and merge.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });