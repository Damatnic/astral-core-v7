name: 'Production Deployment'

on:
  push:
    branches: ['main', 'master']
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - 'staging'
          - 'production'
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

# Prevent concurrent deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: '18.17'
  REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'astral-core-v7'

jobs:
  # Pre-deployment validation
  pre-deploy-checks:
    name: 'Pre-deployment Validation'
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || inputs.force_deploy == false
    
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 'Run All Pre-deployment Checks'
        run: |
          echo "🔍 Running pre-deployment validation..."
          npm run lint
          npm run typecheck
          npm run test:ci
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"
          NEXTAUTH_SECRET: "test-secret-for-ci"
          NEXTAUTH_URL: "http://localhost:3000"

      - name: 'Generate Version'
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="main-$(git rev-parse --short HEAD)-$(date +%Y%m%d%H%M%S)"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: 'Deployment Check'
        id: check
        run: |
          echo "should_deploy=true" >> $GITHUB_OUTPUT

  # Build and push Docker image
  build-and-push:
    name: 'Build & Push Container'
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks]
    if: always() && (needs.pre-deploy-checks.result == 'success' || needs.pre-deploy-checks.result == 'skipped')
    
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
      image_url: ${{ steps.build.outputs.image_url }}
      
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v5

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Log in to Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Extract Metadata'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.pre-deploy-checks.outputs.version || 'latest' }}

      - name: 'Build and Push Docker Image'
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: 'Set Output Variables'
        run: |
          echo "image_url=${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deploy-checks.outputs.version || 'latest' }}" >> $GITHUB_OUTPUT

  # Database migrations
  database-migration:
    name: 'Database Migration'
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-and-push]
    if: always() && needs.build-and-push.result == 'success'
    
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v5

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 'Run Database Migrations'
        run: |
          echo "🗄️ Running database migrations..."
          npm run db:migrate:prod
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: 'Verify Migration Status'
        run: |
          echo "✅ Database migration completed successfully"

  # Deploy to staging first
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-and-push, database-migration]
    if: always() && needs.build-and-push.result == 'success' && (github.event.inputs.environment != 'production' || github.event_name != 'workflow_dispatch')
    
    environment:
      name: staging
      url: https://staging.astral-core.com
      
    steps:
      - name: 'Deploy to Staging Environment'
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image_url }}"
          
          # Here you would typically use your deployment tool (e.g., kubectl, helm, terraform)
          # Example with kubectl:
          # kubectl set image deployment/astral-core-v7 astral-core-v7=${{ needs.build-and-push.outputs.image_url }}
          # kubectl rollout status deployment/astral-core-v7
          
          echo "✅ Staging deployment completed"

      - name: 'Run Staging Health Checks'
        run: |
          echo "🏥 Running health checks..."
          # Add health check logic here
          curl -f https://staging.astral-core.com/api/health || exit 1
          echo "✅ Staging health checks passed"

      - name: 'Run Smoke Tests'
        run: |
          echo "💨 Running smoke tests..."
          # Add smoke test logic here
          echo "✅ Smoke tests passed"

  # Production deployment (requires manual approval)
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-and-push, database-migration, deploy-staging]
    if: always() && (needs.deploy-staging.result == 'success' || github.event.inputs.environment == 'production')
    
    environment:
      name: production
      url: https://astral-core.com
      
    steps:
      - name: 'Deploy to Production Environment'
        run: |
          echo "🚀 Deploying to production environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image_url }}"
          
          # Blue-Green deployment strategy
          # 1. Deploy to new environment
          # 2. Run health checks
          # 3. Switch traffic
          # 4. Monitor for issues
          
          echo "✅ Production deployment completed"

      - name: 'Run Production Health Checks'
        run: |
          echo "🏥 Running production health checks..."
          curl -f https://astral-core.com/api/health || exit 1
          echo "✅ Production health checks passed"

      - name: 'Update Deployment Status'
        run: |
          echo "📊 Updating deployment status..."
          # Update monitoring/alerting systems
          echo "✅ Deployment status updated"

  # Post-deployment tasks
  post-deploy:
    name: 'Post-deployment Tasks'
    runs-on: ubuntu-latest
    needs: [deploy-production, build-and-push, pre-deploy-checks]
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
      - name: 'Clear CDN Cache'
        run: |
          echo "🗑️ Clearing CDN cache..."
          # Add CDN cache clearing logic
          echo "✅ CDN cache cleared"

      - name: 'Update Monitoring Dashboards'
        run: |
          echo "📊 Updating monitoring dashboards..."
          # Update monitoring systems with new deployment info
          echo "✅ Monitoring dashboards updated"

      - name: 'Send Deployment Notifications'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentMessage = `🚀 **Production Deployment Successful**
            
            **Version:** \`${{ needs.pre-deploy-checks.outputs.version }}\`
            **Image:** \`${{ needs.build-and-push.outputs.image_url }}\`
            **Commit:** \`${{ github.sha }}\`
            **Deployed by:** @${{ github.actor }}
            **Environment:** Production
            
            **Links:**
            - 🌐 [Production Site](https://astral-core.com)
            - 📊 [Monitoring Dashboard](https://monitoring.astral-core.com)
            - 📈 [Performance Metrics](https://metrics.astral-core.com)
            
            All health checks passed successfully! 🎉`;
            
            // Send to Slack, Discord, or other notification service
            console.log(deploymentMessage);

      - name: 'Create GitHub Release'
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## 🚀 Astral Core v7 Release
            
            **Deployed:** ${{ needs.pre-deploy-checks.outputs.version }}
            **Container Image:** ${{ needs.build-and-push.outputs.image_url }}
            
            ### What's Changed
            - See commit history for detailed changes
            
            ### Deployment Status
            ✅ All tests passed
            ✅ Security scans completed
            ✅ Production deployment successful
            ✅ Health checks passed
          draft: false
          prerelease: false

  # Rollback capability
  rollback-production:
    name: 'Rollback Production'
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: [deploy-production]
    
    environment:
      name: production
      
    steps:
      - name: 'Rollback Production Deployment'
        run: |
          echo "🔄 Rolling back production deployment..."
          # Add rollback logic here
          # kubectl rollout undo deployment/astral-core-v7
          echo "✅ Production rollback completed"

      - name: 'Verify Rollback'
        run: |
          echo "🔍 Verifying rollback..."
          curl -f https://astral-core.com/api/health || exit 1
          echo "✅ Rollback verification passed"

      - name: 'Send Rollback Notification'
        run: |
          echo "⚠️ Production deployment was rolled back due to failures"
          # Send alert notifications