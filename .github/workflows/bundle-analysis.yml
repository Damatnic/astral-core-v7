name: Bundle Analysis

on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

jobs:
  bundle-analysis:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          ANALYZE: true

      - name: Generate bundle report
        run: |
          npm run analyze:bundle > bundle-report.txt 2>&1 || true
          echo "Bundle analysis completed"

      - name: Check bundle size limits
        run: |
          node scripts/check-bundle-size.js

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-analysis
          path: |
            .next/analyze/
            bundle-report.txt
          retention-days: 7

      - name: Comment bundle analysis on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## ðŸ“Š Bundle Analysis Report\n\n';
            
            try {
              const report = fs.readFileSync('bundle-report.txt', 'utf8');
              comment += '```\n' + report + '\n```';
            } catch (error) {
              comment += 'Bundle analysis report could not be generated.';
            }
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('Bundle Analysis Report')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }